import { Effect } from "./effects";
import { Param, UnwrapList } from "./param";
export interface Component {
    update: Effect;
    dispose: Effect;
}
export declare function optional(flag: Param<boolean>, createComponent: () => Component): Component;
export declare function list<T>(items: Param<T[]>, key: (v: T, i: number) => string | number, createComponent: (item: Param<T>) => Component): Component;
export declare function group(...components: Component[]): Component;
export declare function cache<P extends Param<any>[]>(...input: P): (mapping: (...params: P) => Component) => Component;
/**
 * Recreate component on parameters change
 */
export declare function cmap<P extends Param<any>[]>(...input: P): (create: (...input: UnwrapList<P>) => Component) => Component;
