export declare class Immediate<T> implements PromiseLike<T> {
    private promise;
    private result;
    constructor(promise: PromiseLike<T>);
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined): PromiseLike<TResult1 | TResult2>;
    static resolve<T>(value: T): PromiseLike<T>;
    static reject<T = any>(reason: any): PromiseLike<T>;
    static wrap<P extends any[], R>(callback: (...a: P) => PromiseLike<R>): (...a: P) => PromiseLike<R>;
}
