"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const param_1 = require("./param");
function ease(t) {
    return t < 0.5
        ? 2 * t * t
        : -1 + (4 - 2 * t) * t;
}
function createTransition({ equals, mix }) {
    return ({ time, value, initial = param_1.unwrap(value), delay = 0, duration, easing = ease, }) => {
        if (param_1.isValue(value) && equals(value, initial)) {
            return value;
        }
        else {
            let source = initial, target = param_1.unwrap(value), changeTime = param_1.unwrap(time), transitionDelay = param_1.unwrap(delay), transitionDuration = param_1.unwrap(duration);
            const update = () => {
                const newValue = param_1.unwrap(value);
                if (!equals(target, newValue)) {
                    source = param_1.unwrap(compute);
                    target = newValue;
                    changeTime = param_1.unwrap(time);
                    transitionDelay = param_1.unwrap(delay);
                    transitionDuration = param_1.unwrap(duration);
                }
            };
            const compute = param_1.map(time)(time => {
                const transitionTime = time - changeTime;
                if (transitionTime >= transitionDelay + transitionDuration || equals(source, target)) {
                    return target;
                }
                else if (transitionTime <= transitionDelay) {
                    return source;
                }
                else {
                    const t = (transitionTime - transitionDelay) / transitionDuration;
                    return mix(source, target, easing(t));
                }
            });
            return () => {
                update();
                return param_1.unwrap(compute);
            };
        }
    };
}
exports.createTransition = createTransition;
exports.numberTransition = createTransition({
    equals: (a, b) => a === b,
    mix: (a, b, t) => a * (1 - t) + b * t,
});
//# sourceMappingURL=transition.js.map